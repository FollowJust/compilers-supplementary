-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case c of
    [st, w] -> 
      case stmt of
        Assn (name, expr) -> [st <- [name, evalExpr(st, expr)], w]
        | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
        | Skip -> c
        | Read (name) -> 
            case readWorld(w) of
              [read_value, new_world] -> [st <- [name, read_value], new_world]
            esac
        | Write (expr) ->  [st, writeWorld(evalExpr(st, expr), w)]
        | If (expr, stmt1, stmt2) -> 
            if evalExpr(st, expr) 
              then eval(c, stmt1) 
              else eval(c, stmt2)
            fi
        | While (expr, stmt) ->
            if evalExpr(st, expr)
              then eval(eval(c, stmt), While(expr, stmt))
              else c
            fi
        | DoWhile (stmt, expr) -> eval(eval(c, stmt), While(expr, stmt))
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
