-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of
    [stack, st, w] ->
      case insns of
        {} -> c
        | cur_insn : next_insns -> 
          case cur_insn of
            READ -> 
              case readWorld(w) of
                [read_value, new_world] -> eval([read_value : stack, st, new_world], next_insns)
              esac
            | WRITE ->
                case stack of 
                  top : rem_stack -> eval([rem_stack, st, writeWorld(top, w)], next_insns)
                esac
            | BINOP(op) ->
                case stack of
                  y : x : rem_stack -> eval([evalBinOp(op, x, y) : rem_stack, st, w], next_insns)
                esac
            | LD(name) -> eval([st (name) : stack, st, w], next_insns)
            | ST(name) -> 
                case stack of
                  top : rem_stack -> eval([rem_stack, st <- [name, top], w], next_insns)
                esac
            | CONST(n) -> eval([n : stack, st, w], next_insns)
          esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(name) -> LD(name) : {}
    | Const(n) -> CONST(n) : {}
    | Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ (BINOP(op) : {})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(name, expr) -> compileExpr(expr) +++ (ST(name) : {})
    | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read(name) -> READ : ST(name) : {}
    | Write(expr) -> compileExpr(expr) +++ (WRITE : {})
  esac
}