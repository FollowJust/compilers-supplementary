-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parseBinop (op) {
  [ s (op), fun (l, op, r) { Binop (op, l, r) } ]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
        exp = memo $ eta expr({
              -- ranged by precendence
              -- precedence and associativity from cpp reference
              [Left, {
                parseBinop("!!"),
                parseBinop("&&")
              }],
              [Nona, {
                parseBinop("=="),
                parseBinop("!=")
              }],
              [Nona, {
                parseBinop("<"),
                parseBinop("<="),
                parseBinop(">"),
                parseBinop(">=")
              }],
              [Left, {
                parseBinop("+"),
                parseBinop("-")
              }],
              [Left, {
                parseBinop("/"),
                parseBinop("*"),
                parseBinop("%")
              }]
          }, primary);

var singleStmt = memo $ eta syntax(
  kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
  kWrite x=inbr[s("("), exp, s(")")] { Write (x) } |
  kSkip { Skip } |
  x=lident s[":="] e=exp { Assn(x, e) }
);

var stmt = memo $ eta syntax (
  singleStmt |
  x1=singleStmt s[";"] x2=stmt { Seq(x1, x2) }
);
   

-- Public top-level parser
public parse = stmt;